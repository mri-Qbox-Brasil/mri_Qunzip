name: Build and Release

on:
    push:
        tags:
            - "v*.*.*"

permissions:
    contents: write
    actions: write

jobs:
    build_and_release:
        runs-on: ubuntu-latest
        outputs:
            commits: ${{ steps.get_project_information.outputs.commits }}
            version: ${{ steps.get_project_information.outputs.version }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "16" # versão suportada pelo FiveM

            - name: Install dependencies
              working-directory: ./src
              run: npm install

            - name: Build project
              working-directory: ./src
              run: npm run build

            - name: Get commit messages and version
              id: get_project_information
              run: |
                  COMMITS=$(git log --format=%B -n 5)  # Ajuste para pegar os últimos 5 commits
                  VERSION="${GITHUB_REF#refs/tags/v}"
                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "commits=$COMMITS" >> $GITHUB_OUTPUT

            - name: Update version in file
              run: |
                  sed -i "s/MRIQBOX_VERSION/${{ steps.get_project_information.outputs.version }}/g" fxmanifest.lua

            - name: Create ZIP file
              run: |
                  mkdir -p release/${{ github.event.repository.name }}
                  mkdir -p release/${{ github.event.repository.name }}/modules
                  mkdir -p release/${{ github.event.repository.name }}/web-side
                  cp fxmanifest.lua release/${{ github.event.repository.name }}
                  cp -r modules/**/* release/${{ github.event.repository.name }}/modules
                  cp -r web-side/**/* release/${{ github.event.repository.name }}/web-side
                  cd release
                  zip -r ${{ github.event.repository.name }}.zip ${{ github.event.repository.name }}
              shell: bash

            - name: Generate Release
              uses: comnoco/create-release-action@v2
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              id: release
              with:
                  tag_name: "v${{ steps.get_project_information.outputs.version }}"
                  release_name: "v${{ steps.get_project_information.outputs.version }}"
                  body: "${{ steps.get_project_information.outputs.commits }}"
                  draft: false
                  prerelease: false

            - name: Upload artifacts
              uses: actions/upload-artifact@v3 # Atualização para a versão mais recente
              with:
                  name: "${{ github.event.repository.name }}.zip"
                  path: release/${{ github.event.repository.name }}.zip

    post_to_discord:
        needs: build_and_release
        runs-on: ubuntu-latest
        steps:
            - name: Post to Discord (with embed)
              env:
                  DISCORD_WEBHOOK_URL: ${{ secrets.UPDATE_DISCORD_WEBHOOK }}
                  COMMITS: ${{ needs.build_and_release.outputs.commits }}
                  RELEASE_URL: https://github.com/${{ github.repository }}/releases/latest
                  RELEASE_TAG: ${{ github.ref_name }}
              run: |
                  EMBED_DATA='{
                    "embeds": [{
                      "title": "Nova versão disponível: '"${RELEASE_TAG}"'",
                      "url": "'"${RELEASE_URL}"'",
                      "color": 4243543,
                      "fields": [{
                        "name": "O que há de novo? (últimos 5 commits)",
                        "value": "'"${COMMITS}"'"
                      }],
                      "footer": {
                        "text": "MRI QBOX",
                        "icon_url": "https://assets.mriqbox.com.br/branding/logo96.png"
                      },
                      "timestamp": "'"$(date --utc +%Y-%m-%dT%H:%M:%SZ)"'"
                    }]
                  }'
                  curl -H "Content-Type: application/json" \
                    -d "$EMBED_DATA" \
                    $DISCORD_WEBHOOK_URL
