name: Build and Release

on:
    push:
        tags:
            - "v*.*.*"

permissions:
    contents: write
    actions: write

jobs:
    build_and_release:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "16" # versão suportada pelo FiveM

            - name: Install dependencies
              working-directory: ./src
              run: npm install

            - name: Build project
              working-directory: ./src
              run: npm run build

            - name: Get tag version
              id: extract_version
              run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

            - name: Get commit messages
              id: get_commit_messages
              run: |
                  curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/commits?sha=${{ github.sha }}" \
                  | jq -r '.[].commit.message' > release_body.txt

            - name: Update version in file
              run: |
                  sed -i "s/MRIQBOX_VERSION/${{ steps.extract_version.outputs.version }}/g" fxmanifest.lua

            # Criar o arquivo ZIP excluindo os diretórios/arquivos especificados
            - name: Create ZIP file
              run: |
                  mkdir -p release/${{ github.event.repository.name }}
                  mkdir -p release/${{ github.event.repository.name }}/modules
                  mkdir -p release/${{ github.event.repository.name }}/web-side
                  cp fxmanifest.lua release/${{ github.event.repository.name }}
                  cp -r modules/**/* release/${{ github.event.repository.name }}/modules
                  cp -r web-side/**/* release/${{ github.event.repository.name }}/web-side
                  cd release
                  zip -r ${{ github.event.repository.name }}.zip ${{ github.event.repository.name }}
              shell: bash

            # Criar a release via API do GitHub para acionar o evento release
            - name: Generate Release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              id: release
              with:
                  tag_name: "v${{ steps.extract_version.outputs.version }}"
                  release_name: "v${{ steps.extract_version.outputs.version }}"
                  body_path: release_body.txt
                  draft: false
                  prerelease: false

            - name: Upload artifacts
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.release.outputs.upload_url }}
                  asset_path: release/${{ github.event.repository.name }}.zip
                  asset_name: "${{ github.event.repository.name }}.zip"
                  asset_content_type: application/zip
